% Compute numerical and exact eigenvalue
% computes error

%######################################################
% NOTE: These values must agree with those in param.py
%######################################################
%clear all
%close all

gam = 1.4
mu = 0.01
rho0 = 1.0
nu0 = mu/rho0
c0 = sqrt(gam*rho0^(gam-1))

% linear.mat is generated by linear_matlab.py
load linear.mat

M = full(M);
A = full(A);
B = [B_ul, B_ur];

% How many eig to compute
neig = 100;

e = eigs(A,M,neig,'LR');

% Find unstable eig
ii = find(real(e)>0);
e(ii)

figure(1)
plot(real(e), imag(e), 'o')
grid on
hold on

% exact eigenvalues
n = (1:100)'*pi;
el = -0.5 * nu0 * n.^2 .* (1 - sqrt(1 - 4*c0^2./(nu0^2*n.^2)));
em = -0.5 * nu0 * n.^2 .* (1 + sqrt(1 - 4*c0^2./(nu0^2*n.^2)));
plot(real(el), imag(el), '*', real(em), imag(em), '*')
hold off

% all exact eigs
ee = [el,em];

% find eig in upper half
iup = find(imag(ee) > 0);
ee = ee(iup);

iup = find(imag(e) > 0);
e = e(iup);

ne = length(e);
ee = ee(1:ne);

% sort eig
[y,ie] = sort(real(e),1,'descend');
e = e(ie);
[y,ie] = sort(real(ee),1,'descend');
ee = ee(ie);

figure(2)
plot(real(ee),imag(ee),'*',real(e),imag(e),'o')
grid on

% compute error in eig
err = abs(e - ee);
fprintf(1,'%e\n', err)

save('err.mat','err')
