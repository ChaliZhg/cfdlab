c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c------------------------------------------------------------------------------
      subroutine useric(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      parameter(x1=0.0,y1=0.1,x2=0.0,y2=-0.1)
      parameter(r0=0.1*0.1, domge=320.0)

      r1 = (x-x1)**2 + (y-y1)**2
      r2 = (x-x2)**2 + (y-y2)**2
      ux = -0.5*domge*(y-y1)*exp(-r1/r0) + 0.5*domge*(y-y2)*exp(-r2/r0)
      uy = +0.5*domge*(x-x1)*exp(-r1/r0) - 0.5*domge*(x-x2)*exp(-r2/r0)
      temp = 0.0

      return
      end
c------------------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      parameter(lt=lx1*ly1*lz1*lelv)
      real vort(lt,3), w1(lt), w2(lt)

      n = nx1*ny1*nz1*nelv

c     now compute vorticity from velocity
      ifto  = .true.
      ifxyo = .false.
      if(istep.eq.0)then
         ifxyo = .true.
         call comp_vort3(vort,w1,w2,vx,vy,vz)
         call copy(t(1,1,1,1,1),vort,n)
         call outpost(vx,vy,vz,pr,t,'   ')
      elseif(mod(istep,iostep).eq.0)then
         call comp_vort3(vort,w1,w2,vx,vy,vz)
         call copy(t(1,1,1,1,1),vort,n)
      endif

c     Compute total kinetic energy and enstrophy
      if(mod(istep,10).eq.0)then
         xke = glsc3(vx, vx, bm1, n)
         yke = glsc3(vy, vy, bm1, n)
         total_ke = 0.5*(xke + yke)
         if(nid.eq.0) write(6,1) istep, time, total_ke
    1    format(i6,1p2e14.6,' Totalke')
c        Compute vorticity if it was not computed above
         if (mod(istep,iostep).gt.0)then
            call comp_vort3(vort,w1,w2,vx,vy,vz)
         endif
         xens = glsc3(vort(1,1), vort(1,1), bm1, n)
         yens = glsc3(vort(1,2), vort(1,2), bm1, n)
         enstrophy = 0.5*(xens + yens)
         if(nid.eq.0) write(6,2) istep, time, enstrophy
    2    format(i6,1p2e14.6,' enstrophy')
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      print*,'Called userbc, this should not happen'
      call exitt

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      param(66) = 4.   ! These give the std nek binary i/o and are 
      param(67) = 4.   ! good default values

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
