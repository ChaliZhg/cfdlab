c Pressure driven miscible channel flow
c
c Inlet velocity Uq is chosen so that velocity based on mass flow rate
c is unity
c    Um = int_0^1 u(y) dy = 1.0
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /mygeom/ xmin,xmax
      common /myparam/ smlen,r_k,r_T,Uq,Rey_no,Pr_no,Sc_no,visc_rat

c     Clip concentration to interval [0,1]
      sc    = max(0.0, ps(1))
      sc    = min(1.0, sc)

      if(ifield.eq.1)then   ! momentum equation
         utrans= 1.0
         udiff = exp(sc*log(visc_rat) - temp)/Rey_no
      else if(ifield.eq.2)then ! temperature eqn
         utrans= 1.0
         udiff = sc*(r_k - 1.0) + 1.0
         udiff = udiff/(Rey_no*Pr_no)
      else if(ifield.eq.3)then  ! passive scalar
         utrans= 1.0
         udiff = 1.0/(Rey_no*Sc_no)
      else
         if(nid.eq.0) write(6,'("Only 3 fields")')
         call exitt()
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'  
      include 'TOTAL' 
      include 'RESTART' 
      common /cwdata/ cwgt(lx1*ly1*lz1*lelt),ctot0

      character*80 filename(9999)
      parameter (lyavg = ly1*lz1*lely*lelz)
      real ya(lyavg), ua(lyavg), ca(lyavg), w1(lyavg), 
     1     w2(lyavg), mua(lyavg), Tempa(lyavg)
      parameter(lt=lx1*ly1*lz1*lelv)
      real vort(lt,3), ww1(lt), ww2(lt)

c     Save solution on uniform mesh
      ifreguo = .true.
      nxo     = lx1

c     read file-list
      if (nid.eq.0) then
        call system("ls -1 channel0.f* | wc -l > file.list")
        call system("ls -1 channel0.f* >> file.list")
        open(unit=199,file='file.list',form='formatted',status='old')
        read(199,*) nfiles
        read(199,'(A80)') (filename(i),i=1,nfiles)
        close(199)
      endif
      call bcast(nfiles,isize)
      call bcast(filename,nfiles*80) 

      if(nid.eq.0)then
         open(unit=500, file='xavg.dat')
         open(unit=501, file='global.dat')
      endif
      do ifil=1,nfiles
         call load_fld(filename(ifil))
         if(nid.eq.0)then
            write(6,*) 'Loaded file ', filename(ifil)
            write(6,*) 'Time =', time
         endif
         call setprop
         if(ifil.eq.1) call x_average(ya, ym1, w1, w2)
         call x_average(ua, vx, w1, w2)
         call x_average(ca, t(1,1,1,1,2), w1, w2)
         call x_average(mua, vdiff(1,1,1,1,1), w1, w2)
         call x_average(tempa, t(1,1,1,1,1), w1, w2)
         if(nid.eq.0) 
     1      call save_x_average(time, ya, ua, ca, mua, tempa)

c     Calculate total concentration
c     Integrate c over regions where c > 0.95
c     We put a smooth heaviside function
         xtip = 0.0
         n    = nx1*ny1*nz1*nelt
         do i=1,n
            cc      = t(i,1,1,1,2) - 0.95
            cwgt(i) = 0.5*(1.0 + erf(50.0*cc))
            if(t(i,1,1,1,2).ge.0.95.and.t(i,1,1,1,2).lt.0.98)then
               xtip = max(xtip, xm1(i,1,1,1))
            endif
         enddo
         ctot = glsc3(t(1,1,1,1,2),cwgt,bm1,n)
         if(ifil.eq.1) ctot0 = ctot
         xtip = glmax(xtip,1)
         if(nid.eq.0)then
            write(501,'(3E14.6)') time, ctot/ctot0, xtip
         endif
c        Compute vorticity, store it as third passive scalar
         call comp_vort3(vort,ww1,ww2,vx,vy,vz)
         call copy(t(1,1,1,1,3),vort,n)
c        Compute solution at hpts
         call hpts()
c        Save solution on uniform mesh
         call prepost(.true., '   ')
      enddo

c     Save solution along x=const lines
      call save_x_constant()

      call exitt()

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /myparam/ smlen,r_k,r_T,Uq,Rey_no,Pr_no,Sc_no,visc_rat

      ux    = 4.0*Uq*y*(1.0-y)
      uy    = 0.0
      uz    = 0.0
      temp  = 0.0

      if(ifield.eq.2)then      ! temperature: inlet=r_T, sides=0
         temp  = r_T*(1.0 - erf(smlen*x))
      else if(ifield.eq.3)then ! passive scalar
         temp = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /myparam/ smlen,r_k,r_T,Uq,Rey_no,Pr_no,Sc_no,visc_rat

      ux    = 4.0*Uq*y*(1.0-y)*(1.0 - erf(smlen*x))
      uy    = 0.0
      uz    = 0.0

      if(ifield.eq.2)then       ! temperature: inlet=r_T, sides=0
         temp  = r_T*(1.0 - erf(smlen*x))
      else if(ifield.eq.3)then  ! passive scalar
         temp = erf(smlen*x)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'
      common /myparam/ smlen,r_k,r_T,Uq,Rey_no,Pr_no,Sc_no,visc_rat

      param(66) = 6
      param(67) = 6

c     Length over which to smooth initial condition at inlet
      smlen = 5.0

      r_k      = 1.0
      r_T      = 0.0
      Uq       = 1.5
      Rey_no   = 500.0
      Sc_no    = 100.0
      Pr_no    = 7.0
      visc_rat = 10.0

c     Number of elements along x,y,x
c     This is needed for averaging.
      nelx = lelx
      nely = lely
      nelz = 1

c     Check total number of elements
      if(nelx*nely.ne.nelgt)then
         if(nid.eq.0)then
            write(6,'(5X,"ABORT IN usrdat. Check nelx, nely, nelt.")')
            write(6,'(5X,"nelx, nely = ",2I8)') nelx, nely
            write(6,'(5X,"nelx*nely  = ",I8)') nelx*nely
            write(6,'(5X,"nelgt      = ",I8)') nelgt
         endif
         call exitt()
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      common /mygeom/ xmin,xmax

      ifuservp = .true.
      ifstrs   = .true.

      n    = nx1*ny1*nz1*nelv
      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine save_x_average(cur_time, ya, ua, ca, mua, tempa)
      include 'SIZE'
      include 'ZPER'
      real ya(ny1,nz1,nely,nelz)
      real ua(ny1,nz1,nely,nelz)
      real ca(ny1,nz1,nely,nelz)
      real mua(ny1,nz1,nely,nelz)
      real tempa(ny1,nz1,nely,nelz)
      character*6  ctime
      integer e

      ix = 500
      write(ctime,'(F6.2,5X)') cur_time
      write(ix,*) '"',trim(ctime),'    ux" ',' "c" '
      do e=1,nely
         do j=1,ny1
            write(ix,*) ya(j,1,e,1), ua(j,1,e,1), ca(j,1,e,1), 
     1                  mua(j,1,e,1), tempa(j,1,e,1)
         enddo
      enddo
      write(ix,*)
      write(ix,*)

      return
      end
c-----------------------------------------------------------------------
c Save solution along i=nx1 lines of each element into "output"
c directory as p0.dat, p1.dat, etc. Number is based on processor id.
c The files are later processed by xconst.m matlab script.
c-----------------------------------------------------------------------
      subroutine save_x_constant()
      include 'SIZE'
      include 'TOTAL' 
      character*80 filename(9999)
      character*80 ii, fname
      integer      e
      real         wrk1(lx1,ly1,lz1,lelt)
      real         wrk2(lx1,ly1,lz1,lelt)
      real         vx_y(lx1,ly1,lz1,lelt)
      real         vx_yy(lx1,ly1,lz1,lelt)
      real         vx_yyy(lx1,ly1,lz1,lelt)
      real         T_y(lx1,ly1,lz1,lelt)
      real         T_yy(lx1,ly1,lz1,lelt)
      real         c_y(lx1,ly1,lz1,lelt)
      real         c_yy(lx1,ly1,lz1,lelt)

      if(nid.eq.0)then
         call system("ls -1 avgchannel* | wc -l > file.list")
         call system("ls -1 avgchannel* >> file.list")
         open(unit=199,file='file.list',form='formatted',status='old')
         read(199,*) nfiles
         read(199,'(A80)') (filename(i),i=1,nfiles)
         close(199)

         call system("mkdir -f output")
         call system("rm -f output/p*.dat")
      endif
      call bcast(nfiles,isize)
      call bcast(filename,nfiles*80) 

      call load_fld(filename(nfiles))
      if(nid.eq.0)then
         write(6,*) 'Loaded file ', filename(nfiles)
         write(6,*) 'Time =', time
      endif

      n = nx1*ny1*nz1*nelv

c     1/2/3 y derivative of x velocity
      call gradm1(wrk1, vx_y, wrk2, vx)
      call col2(vx_y, bm1, n)
      call dssum(vx_y, nx1, ny1, nz1)
      call col2(vx_y, binvm1, n)

      call gradm1(wrk1, vx_yy, wrk2, vx_y)
      call col2(vx_yy, bm1, n)
      call dssum(vx_yy, nx1, ny1, nz1)
      call col2(vx_yy, binvm1, n)

      call gradm1(wrk1, vx_yyy, wrk2, vx_yy)
      call col2(vx_yyy, bm1, n)
      call dssum(vx_yyy, nx1, ny1, nz1)
      call col2(vx_yyy, binvm1, n)

c     1/2 y derivative of Temperature
      call gradm1(wrk1, T_y, wrk2, t(1,1,1,1,1))
      call col2(T_y, bm1, n)
      call dssum(T_y, nx1, ny1, nz1)
      call col2(T_y, binvm1, n)

      call gradm1(wrk1, T_yy, wrk2, T_y)
      call col2(T_yy, bm1, n)
      call dssum(T_yy, nx1, ny1, nz1)
      call col2(T_yy, binvm1, n)

c     1/2 y derivative of concentration
      call gradm1(wrk1, c_y, wrk2, t(1,1,1,1,2))
      call col2(c_y, bm1, n)
      call dssum(c_y, nx1, ny1, nz1)
      call col2(c_y, binvm1, n)

      call gradm1(wrk1, c_yy, wrk2, c_y)
      call col2(c_yy, bm1, n)
      call dssum(c_yy, nx1, ny1, nz1)
      call col2(c_yy, binvm1, n)

      write(ii,'(i5.5)') nid
      fname = 'output/p'//trim(ii)//'.dat'

      open(unit=502, file=trim(fname))
      do e=1,nelt
         i = nx1
         do j=1,ny1
            write(502,*) xm1(i,j,1,e), ym1(i,j,1,e), vx(i,j,1,e), 
     1                   vx_y(i,j,1,e), vx_yy(i,j,1,e), 
     2                   vx_yyy(i,j,1,e), t(i,j,1,e,1), T_y(i,j,1,e),
     3                   T_yy(i,j,1,e), t(i,j,1,e,2), c_y(i,j,1,e),
     4                   c_yy(i,j,1,e)
         enddo
      enddo

      return
      end
